service: "invoice-creator"
# frameworkVersion: 3
plugins:
  - serverless-esbuild
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation

provider:
  name: aws
  runtime: nodejs14.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'eu-west-1'}

  environment:
    USERS_TABLE: USERS-${self:provider.stage}
    USERS_EMAIL_INDEX: usersEmailIndex
    SECRET_AUTH: secretauth-${self:provider.stage}
    INVOICES_S3_BUCKET: invoice-s3-bucket-${self:provider.stage}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:PutItem
        - dynamodb:GetItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}

    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}/index/${self:provider.environment.USERS_EMAIL_INDEX}

    - Effect: Allow
      Action:
        - sqs:SendMessage
      Resource: arn:aws:sqs:eu-west-1:306486807413:invoice_queue

    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:GetObject
      Resource: arn:aws:s3:::${self:provider.environment.INVOICES_S3_BUCKET}/*

functions:
  Hello:
    handler: src/lambda/hello/hello.handler
    events:
      - http:
          method: post
          path: hello
          authorizer: Auth

  Login:
    handler: src/lambda/http/login.handler
    events:
      - http:
          method: post
          path: login

  Register:
    handler: src/lambda/http/register.handler
    events:
      - http:
          method: post
          path: signup
          reqValidatorName: RequestBodyValidador
          documentation:
            summary: create a new user
            description: create a new user
            requestModels:
              "application/json": RegisterUserRequest

  Auth:
    handler: src/lambda/http/auth/authorizer.handler

  CreateInvoiceStep1:
    handler: src/lambda/http/invoices/create-invoice.handler
    events:
      - http:
          method: post
          path: invoices

  ProcessInvoice:
    handler: src/lambda/sqs/process-invoice.handler
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - InvoiceSQS
              - Arn
    timeout: 10
    # memorySize: 1024

package:
  individually: true

custom:
  documentation:
    api:
      info:
        version: "1.0.0"
        title: Invoice-creator
        description: serverless application to create and manage invoice

    models:
      - name: RegisterUserRequest
        contentType: application/json
        schema: ${file(src/models/register-user-request.json)}

  esbuild:
    external:
      - chrome-aws-lambda
    packager: yarn
    packagePath: "./package.json"
  bundle: true
  minify: false
  sourcemap: true
  exclude:
    - aws-sdk
  target: node14
  define:
  require.resolve: undefined
  platform: node
  concurrency: 10

resources:
  Resources:
    RequestBodyValidador:
      Type: "AWS::ApiGateway::RequestValidator"
      Properties:
        Name: "req-body-validator"
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

    UsersDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.USERS_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.USERS_EMAIL_INDEX}
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    InvoiceSQS:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: "invoice_queue"
        RedrivePolicy:
          deadLetterTargetArn:
            Fn::GetAtt:
              - "InvoiceDLQ"
              - "Arn"
          maxReceiveCount: 5

    InvoiceDLQ:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: "invoice-dlq"

    InvoicesPdf:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.INVOICES_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - "*"
              AllowedHeaders:
                - "*"
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    # BucketPolicy:
    #   Type: AWS::S3::BucketPolicy
    #   Properties:
    #     PolicyDocument:
    #       Id: Policy1680676867147
    #       Version: "2012-10-17"
    #       Statement:
    #         - Sid: Stmt1680676858392
    #           Action:
    #             - s3:GetObject
    #           Effect: Allow
    #           Resource: "arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*"
    #           Principal: "*"
    #     Bucket:
    #       Ref: AttachmentsBucket
